{"version":3,"sources":["view/canvas/canvas.tsx","view/errors/errors.tsx","view/projector-state/projector-state.tsx","app/app.tsx","index.tsx"],"names":["Canvas","content","ref","React","createRef","this","refresh","_this2","props","div","current","innerHTML","suffixes","_loop","index","element","querySelector","concat","onError","Tfw","Gesture","on","down","onProjectorClick","bind","forEach","suffix","id","images","querySelectorAll","length","onWallClicked","prefix","projector","classes","busy","push","power","stereo","projectors","apply","Object","toConsumableArray","getClasses","react_default","a","createElement","className","join","Component","InputFile","View","Errors","state","handleClick","_callee","files","file","regenerator_default","wrap","_context","prev","next","console","info","abrupt","readFileAsText","sent","_this","onLoad","stop","Converter","StringArray","accept","wide","label","icon","onClick","errors","map","error","key","Checkbox","ProjectorState","attributeName","value","setState","objectSpread","defineProperty","_this$props","onChange","swap","App","Button","randomProjector","handleWallClicked","slice","handleNewError","_this$state","name","projector_state_ProjectorState","updateProjector","canvas_Canvas","errors_Errors","rnd","serverError","warnings","Math","random","Theme","register","bg0","bg3","root","document","getElementById","ReactDOM","render","app_App"],"mappings":"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","file":"static/js/main.a68b1007.chunk.js","sourcesContent":["import Tfw from 'tfw'\nimport React from \"react\"\nimport { IProjectorState } from '../../types'\nimport \"./canvas.css\"\n\n\ninterface TCanvasProps {\n    content: string,\n    projectors: Array<IProjectorState>,\n    onWallClicked(wallIndex: number): void,\n    onError(error: string): void\n}\n\ninterface TCanvasState { }\n\nexport default class Canvas extends React.Component<TCanvasProps, TCanvasState> {\n    private content = \"\"\n    private ref = React.createRef<HTMLDivElement>()\n\n    componentDidMount() {\n        this.refresh()\n    }\n\n    componentDidUpdate() {\n        this.refresh()\n    }\n\n    private refresh() {\n        const content = this.props.content\n        const div = this.ref.current\n        if (!div) return\n        if (this.content === content) return\n        this.content = content\n        div.innerHTML = content\n\n        const suffixes = [\"Off\", \"Mono\", \"Stereo\", \"Busy\"]\n        for (let index = 1; index < 8; index++) {\n            const element = div.querySelector(`#projector${index}`)\n            if (!element) {\n                this.props.onError(`Missing SVG ID: #projector${index}`)\n                continue\n            }\n            Tfw.Gesture(element).on({\n                down: this.onProjectorClick.bind(this, index)\n            })\n            suffixes.forEach(suffix => {\n                const id = `#projector${index}${suffix}`\n                const element = div.querySelector(id)\n                if (!element) this.props.onError(`Missing SVG ID: ${id}`)\n            })\n        }\n        const element = div.querySelector(`#floor`)\n        if (element) {\n            Tfw.Gesture(element).on({\n                down: this.onProjectorClick.bind(this, 0)\n            })\n        } else {\n            this.props.onError(\"Missing SVG ID: #floor\")\n        }\n        suffixes.forEach(suffix => {\n            const id = `#floor${suffix}`\n            const element = div.querySelector(id)\n            if (!element) this.props.onError(`Missing SVG ID: ${id}`)\n        })\n        const images = div.querySelectorAll(\"image\")\n        if (images.length > 0) {\n            this.props.onError(`Pleae avoid <image> elements. I've found ${images.length} of them.`)\n        }\n    }\n\n    private onProjectorClick(index: number) {\n        this.props.onWallClicked(index)\n    }\n\n    private getClasses(prefix: string, projector: IProjectorState) {\n        const classes: string[] = []\n        if (projector.busy) {\n            classes.push(`${prefix}Busy`)\n        }\n        else {\n            if (!projector.power) {\n                classes.push(`${prefix}Off`)\n            }\n            else if (projector.stereo) {\n                classes.push(`${prefix}Stereo`)\n            }\n            else {\n                classes.push(`${prefix}Mono`)\n            }\n        }\n        return classes\n    }\n\n    render() {\n        const { projectors } = this.props\n        const classes = ['openDeck-view-hardwareDashboard-Canvas']\n        classes.push(...this.getClasses(\"projector1\", projectors[1]))\n        classes.push(...this.getClasses(\"projector2\", projectors[2]))\n        classes.push(...this.getClasses(\"projector3\", projectors[3]))\n        classes.push(...this.getClasses(\"projector4\", projectors[4]))\n        classes.push(...this.getClasses(\"projector5\", projectors[5]))\n        classes.push(...this.getClasses(\"projector6\", projectors[6]))\n        classes.push(...this.getClasses(\"projector7\", projectors[7]))\n        classes.push(...this.getClasses(\"floor\", projectors[0]))\n        return (<div className={classes.join(\" \")} ref={this.ref}></div>)\n    }\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\n\nimport \"./errors.css\"\n\nconst InputFile = Tfw.View.InputFile\n\ninterface IErrorsProps {\n    className?: string[]\n    errors: string[]\n    onLoad(content: string): void\n}\ninterface IErrorsState {}\n\nexport default class Errors extends React.Component<IErrorsProps, IErrorsState> {\n    state = {}\n\n    private handleClick = async (files: FileList) => {\n        console.info(\"files=\", files)\n        const file = files[0]\n        if (!file) return\n        const content = await InputFile.readFileAsText(file)\n        this.props.onLoad(content)\n    }\n\n    render() {\n        const classes = [\n            'view-Errors',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n\n        return (<div className={classes.join(' ')}>\n            <InputFile\n                accept=\".svg\" wide={true} label=\"Select an SVG file\"\n                icon=\"import\" onClick={this.handleClick}/>\n        <div className=\"body thm-bg2 thm-ele-bar\">\n            {\n                this.props.errors.map(\n                    (error: string, index: number) => <div key={`error-${index}`}>{error}</div>\n                )\n            }\n            </div>\n        </div>)\n    }\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\n\nimport { IProjectorState } from \"../../types\"\n\n\nimport \"./projector-state.css\"\n\nconst Checkbox = Tfw.View.Checkbox\n//const _ = Tfw.Intl.make(require(\"./projector-state.yaml\"))\n\ninterface IProjectorStateProps {\n    className?: string[]\n    label: string\n    projector: IProjectorState\n    onChange(projector: IProjectorState): void\n}\ninterface IProjectorStateState {}\n\nexport default class ProjectorState extends React.Component<IProjectorStateProps, IProjectorStateState> {\n    state = {}\n\n    swap(attributeName: keyof IProjectorState, value: boolean) {\n        const { projector } = this.props\n        this.setState({\n            projector: {\n                ...projector,\n                [attributeName]: value\n            }\n        })\n    }\n\n    render() {\n        const { label, projector } = this.props\n        const classes = [\n            'view-ProjectorState', 'thm-bg2', 'thm-ele-button',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n\n        return (<div className={classes.join(' ')}>\n            <label>{label}</label>\n            <Checkbox label=\"Busy\" value={projector.busy} onChange={value => this.swap(\"busy\", value)}/>\n            <Checkbox label=\"Power\" value={projector.power} onChange={value => this.swap(\"power\", value)}/>\n            <Checkbox label=\"3D\" value={projector.stereo} onChange={value => this.swap(\"stereo\", value)}/>\n        </div>)\n    }\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport Canvas from '../view/canvas'\nimport Errors from '../view/errors'\nimport ProjectorState from '../view/projector-state'\nimport { IProjectorState } from '../types'\n\nimport \"./app.css\"\n\nconst Button = Tfw.View.Button\n\ninterface IAppProps {\n    className?: string[]\n}\ninterface IAppState {\n    projectors: IProjectorState[],\n    content: string,\n    errors: string[]\n}\n\nexport default class App extends React.Component<IAppProps, IAppState> {\n    state = {\n        projectors: [\n            randomProjector(), randomProjector(), randomProjector(), randomProjector(),\n            randomProjector(), randomProjector(), randomProjector(), randomProjector()\n        ],\n        content: \"\",\n        errors: []\n    }\n\n    handleWallClicked = (index: number) => {\n        const projectors = this.state.projectors.slice()\n        const projector = { ...projectors[index] }\n        if (!projector.power) {\n            projector.power = true\n        }\n        else {\n            projector.stereo = !projector.stereo\n        }\n        projectors[index] = projector\n        this.setState({ projectors })\n    }\n\n    handleNewError = (error: string) => {\n        const errors: string[] = this.state.errors.slice()\n        errors.push(error)\n        this.setState({ errors })\n    }\n\n    updateProjector(projector: IProjectorState, index: number) {\n        const projectors = this.state.projectors.slice()\n        projectors[index] = { ...projector }\n        this.setState({ projectors })\n    }\n\n    render() {\n        const { projectors, content, errors } = this.state\n        const classes = [\n            'App', 'thm-bg0',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n\n        return (<div className={classes.join(' ')}>\n            <div>\n                <div className=\"projectors\">\n                {\n                    [\n                        \"floor\", \"projector 1\", \"projector 1\", \"projector 3\",\n                        \"projector 4\", \"projector 5\", \"projector 6\", \"projector 7\"\n                    ].map((name: string, index: number) =>\n                        <ProjectorState\n                            key={`proj-${index}`}\n                            label={name} projector={projectors[index]}\n                            onChange={(projector) => this.updateProjector(projector, index)} />\n                    )\n                }\n                </div>\n                <Canvas\n                    content={content}\n                    projectors={projectors}\n                    onError={this.handleNewError}\n                    onWallClicked={this.handleWallClicked} />\n            </div>\n            <Errors errors={errors} onLoad={content => this.setState({ content })}/>\n        </div>)\n    }\n}\n\nfunction randomProjector(): IProjectorState {\n    return {\n        busy: rnd(),\n        errors: [],\n        name: \"proj\",\n        power: rnd(),\n        serverError: \"\",\n        stereo: rnd(),\n        warnings: []\n    }\n}\n\nfunction rnd(): boolean {\n    return Math.random() < 0.5\n}\n","import Tfw from 'tfw'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\nTfw.Theme.register(\"default\", {\n    bg0: \"#000\",\n    bg3: \"#666\"\n})\nTfw.Theme.apply(\"default\");\n\n// Entry point for our app\nconst root = document.getElementById('root') as HTMLElement;\nReactDOM.render(<App />, root)\n"],"sourceRoot":""}